#edit
# https://jfrog.com/help/r/jfrog-platform-administration-documentation/sample-integration-of-jfrog-oidc-with-github-actions
name: "JFTD-110-GitHub_Actions_for_JFrog: NPM Package with OIDC"
description: "This workflow demonstrates how to use JFrog CLI with OIDC authentication to build and publish an NPM package, manage builds"
on:
  push:
    paths:
      - 'JFTD-110-GitHub_Actions_for_JFrog/**'
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  NODE_VERSION: "20" # Node version to use
  JOB_SUMMARY: true
  JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
  WORKSPACE_NPM: "JFTD-110-GitHub_Actions_for_JFrog/helloworld_npm"
  RT_REPO_NPM_VIRTUAL: "lab110-npm-virtual"
  RT_REPO_NPM_DEFAULT_LOCAL: "lab110-npm-sandbox-local"

jobs:

  npmPackage:
    name: "NPM Package"
    runs-on: ubuntu-latest  # node:22-alpine
    env: 
      BUILD_NAME: "lab110-npm-oidc"
      BUILD_ID: "ga-npm-${{github.run_number}}"
    defaults:
       run:
         working-directory: ${{env.WORKSPACE_NPM}}
    steps:
      - name: "Checkout Repository"
        continue-on-error: true
        uses: actions/checkout@v4

      # TODO: Lab 1.1 - Replace this commented section with the snippet from "Step 1: Create the Github OIDC Integration object in your JFrog Platform instance"
      # 
      # Instructions:
      # 1. Go to your JFrog Platform instance
      # 2. Navigate to Administration -> General Management -> Manage Integrations -> New Integration -> OpenID Connect tab -> New Integration
      # 3. Select "Open ID Connect" in the drop-down menu
      # 4. Configure the OIDC provider with your settings
      # 5. Copy the "Show Snippet" YAML configuration
      # 6. Replace this commented section with the copied snippet
      #
      #- name: "Get Artifactory Access Token and Setup JFrog CLI"
      #  uses: jfrog/setup-jfrog-cli@v4
      #  id: setup-cli
      #  env:
      #    JF_URL: ${{vars.JF_RT_URL}}   # example: http://academy-artifactory.dzmfffgzzkmf.instruqt.io
      #  with:
      #    version: latest
      #    oidc-provider-name: jfrog-githuboidc

      - name: "Get Artifactory Access Token and Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{vars.ARTIFACTORY_URL}}
        with:
          version: latest
          oidc-provider-name: jfrog-githuboidc

      - name: "Run only if value is present"
        if: steps.setup-jfrog-cli.outputs.oidc-token != ''
        run: |
          echo "Access Token set as output to 'Get Artifactory Access Token and Setup JFrog CLI'"

      # - name: "Optional: Setup Node.js v${{env.NODE_VERSION}}"
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: ${{env.NODE_VERSION}}
      #     registry-url: "${{env.JF_RT_URL}}/artifactory/api/npm/${{ env.RT_REPO_NPM_VIRTUAL }}"  # https://psazuse.jfrog.io/artifactory/api/npm/todomvc-npm-virtual/

      - name: "Config npm registry with JFrog CLI"
        run: |
          pwd
          jf npmc --repo-deploy=${{ env.RT_REPO_NPM_VIRTUAL}} --repo-resolve=${{ env.RT_REPO_NPM_VIRTUAL}}

      # Package
      - name: "Curation: audit" # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/cli-for-jfrog-curation
        timeout-minutes: 15    # ref https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf ca --format=table --threads=100
  
      - name: "Xray & JAS: Audit"  # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security
        # scan for Xray: Source code dependencies and JAS: Secrets Detection, IaC, Vulnerabilities Contextual Analysis 'SAST'
        timeout-minutes: 15  # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf audit --npm --sast=true --sca=true --secrets=true --licenses=true --validate-secrets=true --vuln=true --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: npm Build"   
        continue-on-error: false
        run: |
          jf npm install --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 
     
      - name: "Package: npm publish"
        continue-on-error: false
        run: |
          jf npm publish --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 

      - name: "Package: Xray - npm Artifact scan"
        timeout-minutes: 15  # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
        run: |
          jf scan . --format=table --extended-table=true --threads=100 --fail=false
      
      # Build Info
      - name: "BCE: Collect env"
        continue-on-error: true
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: "BAG: Add VCS info"
        continue-on-error: true
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
      
      - name: "BP: Build Publish"  
        continue-on-error: false
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true
      

      - name: "Sleep for few seconds"
        env: 
          SLEEP_TIME: 30
        run: |
           echo "Sleeping for ${{env.SLEEP_TIME}} seconds..."
           sleep ${{env.SLEEP_TIME}}  # Sleeping for 20 seconds before executing the build publish seems to have resolved the build-scan issue. This delay might be helping with synchronization or resource availability, ensuring a smooth build process.
           echo "Awake now!"

      - name: "Optional: Query - Build Scan status"
        run: |
          jf xr curl "/api/v1/build/status" -H 'Content-Type: application/json' -d '{"name": "${{env.BUILD_NAME}}", "number": "${{env.BUILD_ID}}" }'

      - name: "BuildInfo: Xray - Build scan"
        timeout-minutes: 15   
        continue-on-error: true  
        run: |
          jf bs ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --fail=false --format=table --extended-table=true --rescan=false --vuln=true

  
    
  
